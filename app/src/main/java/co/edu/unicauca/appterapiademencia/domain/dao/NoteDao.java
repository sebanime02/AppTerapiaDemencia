package co.edu.unicauca.appterapiademencia.domain.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import co.edu.unicauca.appterapiademencia.domain.Note;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NOTE".
*/
public class NoteDao extends AbstractDao<Note, Long> {

    public static final String TABLENAME = "NOTE";

    /**
     * Properties of entity Note.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PatientId = new Property(1, long.class, "patientId", false, "PATIENT_ID");
        public final static Property UserId = new Property(2, long.class, "userId", false, "USER_ID");
        public final static Property NoteType = new Property(3, String.class, "noteType", false, "NOTE_TYPE");
        public final static Property Date = new Property(4, java.util.Date.class, "date", false, "DATE");
        public final static Property Hour = new Property(5, String.class, "hour", false, "HOUR");
        public final static Property Description = new Property(6, String.class, "description", false, "DESCRIPTION");
        public final static Property Color = new Property(7, String.class, "color", false, "COLOR");
        public final static Property Owner = new Property(8, String.class, "owner", false, "OWNER");
        public final static Property Late = new Property(9, Boolean.class, "late", false, "LATE");
        public final static Property State = new Property(10, Boolean.class, "state", false, "STATE");
    }

    private Query<Note> patient_NoteListQuery;
    private Query<Note> user_NoteListQuery;

    public NoteDao(DaoConfig config) {
        super(config);
    }
    
    public NoteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NOTE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PATIENT_ID\" INTEGER NOT NULL ," + // 1: patientId
                "\"USER_ID\" INTEGER NOT NULL ," + // 2: userId
                "\"NOTE_TYPE\" TEXT," + // 3: noteType
                "\"DATE\" INTEGER NOT NULL ," + // 4: date
                "\"HOUR\" TEXT," + // 5: hour
                "\"DESCRIPTION\" TEXT," + // 6: description
                "\"COLOR\" TEXT," + // 7: color
                "\"OWNER\" TEXT," + // 8: owner
                "\"LATE\" INTEGER," + // 9: late
                "\"STATE\" INTEGER);"); // 10: state
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NOTE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Note entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getPatientId());
        stmt.bindLong(3, entity.getUserId());
 
        String noteType = entity.getNoteType();
        if (noteType != null) {
            stmt.bindString(4, noteType);
        }
        stmt.bindLong(5, entity.getDate().getTime());
 
        String hour = entity.getHour();
        if (hour != null) {
            stmt.bindString(6, hour);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(7, description);
        }
 
        String color = entity.getColor();
        if (color != null) {
            stmt.bindString(8, color);
        }
 
        String owner = entity.getOwner();
        if (owner != null) {
            stmt.bindString(9, owner);
        }
 
        Boolean late = entity.getLate();
        if (late != null) {
            stmt.bindLong(10, late ? 1L: 0L);
        }
 
        Boolean state = entity.getState();
        if (state != null) {
            stmt.bindLong(11, state ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Note entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getPatientId());
        stmt.bindLong(3, entity.getUserId());
 
        String noteType = entity.getNoteType();
        if (noteType != null) {
            stmt.bindString(4, noteType);
        }
        stmt.bindLong(5, entity.getDate().getTime());
 
        String hour = entity.getHour();
        if (hour != null) {
            stmt.bindString(6, hour);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(7, description);
        }
 
        String color = entity.getColor();
        if (color != null) {
            stmt.bindString(8, color);
        }
 
        String owner = entity.getOwner();
        if (owner != null) {
            stmt.bindString(9, owner);
        }
 
        Boolean late = entity.getLate();
        if (late != null) {
            stmt.bindLong(10, late ? 1L: 0L);
        }
 
        Boolean state = entity.getState();
        if (state != null) {
            stmt.bindLong(11, state ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Note readEntity(Cursor cursor, int offset) {
        Note entity = new Note( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // patientId
            cursor.getLong(offset + 2), // userId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // noteType
            new java.util.Date(cursor.getLong(offset + 4)), // date
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // hour
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // description
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // color
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // owner
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // late
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0 // state
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Note entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPatientId(cursor.getLong(offset + 1));
        entity.setUserId(cursor.getLong(offset + 2));
        entity.setNoteType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDate(new java.util.Date(cursor.getLong(offset + 4)));
        entity.setHour(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDescription(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setColor(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setOwner(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLate(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setState(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Note entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Note entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Note entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "noteList" to-many relationship of Patient. */
    public List<Note> _queryPatient_NoteList(long patientId) {
        synchronized (this) {
            if (patient_NoteListQuery == null) {
                QueryBuilder<Note> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.PatientId.eq(null));
                patient_NoteListQuery = queryBuilder.build();
            }
        }
        Query<Note> query = patient_NoteListQuery.forCurrentThread();
        query.setParameter(0, patientId);
        return query.list();
    }

    /** Internal query to resolve the "noteList" to-many relationship of User. */
    public List<Note> _queryUser_NoteList(long userId) {
        synchronized (this) {
            if (user_NoteListQuery == null) {
                QueryBuilder<Note> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserId.eq(null));
                user_NoteListQuery = queryBuilder.build();
            }
        }
        Query<Note> query = user_NoteListQuery.forCurrentThread();
        query.setParameter(0, userId);
        return query.list();
    }

}
