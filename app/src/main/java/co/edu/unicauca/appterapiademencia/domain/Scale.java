package co.edu.unicauca.appterapiademencia.domain;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import co.edu.unicauca.appterapiademencia.domain.dao.DaoSession;
import org.greenrobot.greendao.DaoException;

import co.edu.unicauca.appterapiademencia.domain.dao.DetailFastDao;
import co.edu.unicauca.appterapiademencia.domain.dao.ScaleDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "SCALE".
 */
@Entity(active = true)
public class Scale {

    @Id(autoincrement = true)
    private Long id;
    private long sintomaId;
    private String escalaname;
    private String puntaje;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient ScaleDao myDao;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "escalaId")
    })
    private List<DetailFast> detailFastList;

    @Generated
    public Scale() {
    }

    public Scale(Long id) {
        this.id = id;
    }

    @Generated
    public Scale(Long id, long sintomaId, String escalaname, String puntaje) {
        this.id = id;
        this.sintomaId = sintomaId;
        this.escalaname = escalaname;
        this.puntaje = puntaje;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getScaleDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getSintomaId() {
        return sintomaId;
    }

    public void setSintomaId(long sintomaId) {
        this.sintomaId = sintomaId;
    }

    public String getEscalaname() {
        return escalaname;
    }

    public void setEscalaname(String escalaname) {
        this.escalaname = escalaname;
    }

    public String getPuntaje() {
        return puntaje;
    }

    public void setPuntaje(String puntaje) {
        this.puntaje = puntaje;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<DetailFast> getDetailFastList() {
        if (detailFastList == null) {
            __throwIfDetached();
            DetailFastDao targetDao = daoSession.getDetailFastDao();
            List<DetailFast> detailFastListNew = targetDao._queryScale_DetailFastList(id);
            synchronized (this) {
                if(detailFastList == null) {
                    detailFastList = detailFastListNew;
                }
            }
        }
        return detailFastList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetDetailFastList() {
        detailFastList = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}
