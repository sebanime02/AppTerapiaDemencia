package co.edu.unicauca.appterapiademencia.domain;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import co.edu.unicauca.appterapiademencia.domain.dao.DaoSession;
import org.greenrobot.greendao.DaoException;

import co.edu.unicauca.appterapiademencia.domain.dao.ScaleDao;
import co.edu.unicauca.appterapiademencia.domain.dao.SintomaDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "SINTOMA".
 */
@Entity(active = true)
public class Sintoma {

    @Id(autoincrement = true)
    private Long id;
    private long patientId;
    private String ambito;
    private String signo;
    private Boolean activo;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient SintomaDao myDao;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "sintomaId")
    })
    private List<Scale> scaleList;

    @Generated
    public Sintoma() {
    }

    public Sintoma(Long id) {
        this.id = id;
    }

    @Generated
    public Sintoma(Long id, long patientId, String ambito, String signo, Boolean activo) {
        this.id = id;
        this.patientId = patientId;
        this.ambito = ambito;
        this.signo = signo;
        this.activo = activo;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSintomaDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getPatientId() {
        return patientId;
    }

    public void setPatientId(long patientId) {
        this.patientId = patientId;
    }

    public String getAmbito() {
        return ambito;
    }

    public void setAmbito(String ambito) {
        this.ambito = ambito;
    }

    public String getSigno() {
        return signo;
    }

    public void setSigno(String signo) {
        this.signo = signo;
    }

    public Boolean getActivo() {
        return activo;
    }

    public void setActivo(Boolean activo) {
        this.activo = activo;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Scale> getScaleList() {
        if (scaleList == null) {
            __throwIfDetached();
            ScaleDao targetDao = daoSession.getScaleDao();
            List<Scale> scaleListNew = targetDao._querySintoma_ScaleList(id);
            synchronized (this) {
                if(scaleList == null) {
                    scaleList = scaleListNew;
                }
            }
        }
        return scaleList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetScaleList() {
        scaleList = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}
