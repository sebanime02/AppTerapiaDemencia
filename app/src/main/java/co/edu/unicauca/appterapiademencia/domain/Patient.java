package co.edu.unicauca.appterapiademencia.domain;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import co.edu.unicauca.appterapiademencia.domain.dao.DaoSession;
import co.edu.unicauca.appterapiademencia.domain.dao.HistoricDao;
import co.edu.unicauca.appterapiademencia.domain.dao.NoteDao;
import co.edu.unicauca.appterapiademencia.domain.dao.PatientDao;
import co.edu.unicauca.appterapiademencia.domain.dao.RecommendationDao;

import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "PATIENT".
 */
@Entity(active = true)
public class Patient {

    @Id(autoincrement = true)
    private Long id;

    @NotNull
    private String name;
    private int age;
    private Integer eps;

    @Unique
    private int identity;
    private String antecedents;
    private String syndromes;
    private String observations;
    private Integer mec;
    private Integer gds;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient PatientDao myDao;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "patientId")
    })
    private List<Note> noteList;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "patientId")
    })
    private List<Historic> historicList;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "patientId")
    })
    private List<Recommendation> recommendationList;

    @Generated
    public Patient() {
    }

    public Patient(Long id) {
        this.id = id;
    }

    @Generated
    public Patient(Long id, String name, int age, Integer eps, int identity, String antecedents, String syndromes, String observations, Integer mec, Integer gds) {
        this.id = id;
        this.name = name;
        this.age = age;
        this.eps = eps;
        this.identity = identity;
        this.antecedents = antecedents;
        this.syndromes = syndromes;
        this.observations = observations;
        this.mec = mec;
        this.gds = gds;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPatientDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    @NotNull
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(@NotNull String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public Integer getEps() {
        return eps;
    }

    public void setEps(Integer eps) {
        this.eps = eps;
    }

    public int getIdentity() {
        return identity;
    }

    public void setIdentity(int identity) {
        this.identity = identity;
    }

    public String getAntecedents() {
        return antecedents;
    }

    public void setAntecedents(String antecedents) {
        this.antecedents = antecedents;
    }

    public String getSyndromes() {
        return syndromes;
    }

    public void setSyndromes(String syndromes) {
        this.syndromes = syndromes;
    }

    public String getObservations() {
        return observations;
    }

    public void setObservations(String observations) {
        this.observations = observations;
    }

    public Integer getMec() {
        return mec;
    }

    public void setMec(Integer mec) {
        this.mec = mec;
    }

    public Integer getGds() {
        return gds;
    }

    public void setGds(Integer gds) {
        this.gds = gds;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Note> getNoteList() {
        if (noteList == null) {
            __throwIfDetached();
            NoteDao targetDao = daoSession.getNoteDao();
            List<Note> noteListNew = targetDao._queryPatient_NoteList(id);
            synchronized (this) {
                if(noteList == null) {
                    noteList = noteListNew;
                }
            }
        }
        return noteList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetNoteList() {
        noteList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Historic> getHistoricList() {
        if (historicList == null) {
            __throwIfDetached();
            HistoricDao targetDao = daoSession.getHistoricDao();
            List<Historic> historicListNew = targetDao._queryPatient_HistoricList(id);
            synchronized (this) {
                if(historicList == null) {
                    historicList = historicListNew;
                }
            }
        }
        return historicList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetHistoricList() {
        historicList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Recommendation> getRecommendationList() {
        if (recommendationList == null) {
            __throwIfDetached();
            RecommendationDao targetDao = daoSession.getRecommendationDao();
            List<Recommendation> recommendationListNew = targetDao._queryPatient_RecommendationList(id);
            synchronized (this) {
                if(recommendationList == null) {
                    recommendationList = recommendationListNew;
                }
            }
        }
        return recommendationList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetRecommendationList() {
        recommendationList = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}
