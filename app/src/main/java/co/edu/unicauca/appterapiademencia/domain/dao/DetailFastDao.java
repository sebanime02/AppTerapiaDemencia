package co.edu.unicauca.appterapiademencia.domain.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import co.edu.unicauca.appterapiademencia.domain.DetailFast;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DETAIL_FAST".
*/
public class DetailFastDao extends AbstractDao<DetailFast, Long> {

    public static final String TABLENAME = "DETAIL_FAST";

    /**
     * Properties of entity DetailFast.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property EscalaId = new Property(1, long.class, "escalaId", false, "ESCALA_ID");
        public final static Property Stagename = new Property(2, String.class, "stagename", false, "STAGENAME");
        public final static Property Characteristics = new Property(3, String.class, "characteristics", false, "CHARACTERISTICS");
        public final static Property Mentalage = new Property(4, String.class, "mentalage", false, "MENTALAGE");
        public final static Property Mmsescore = new Property(5, String.class, "mmsescore", false, "MMSESCORE");
    }

    private Query<DetailFast> scale_DetailFastListQuery;

    public DetailFastDao(DaoConfig config) {
        super(config);
    }
    
    public DetailFastDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DETAIL_FAST\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ESCALA_ID\" INTEGER NOT NULL ," + // 1: escalaId
                "\"STAGENAME\" TEXT," + // 2: stagename
                "\"CHARACTERISTICS\" TEXT," + // 3: characteristics
                "\"MENTALAGE\" TEXT," + // 4: mentalage
                "\"MMSESCORE\" TEXT);"); // 5: mmsescore
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DETAIL_FAST\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DetailFast entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getEscalaId());
 
        String stagename = entity.getStagename();
        if (stagename != null) {
            stmt.bindString(3, stagename);
        }
 
        String characteristics = entity.getCharacteristics();
        if (characteristics != null) {
            stmt.bindString(4, characteristics);
        }
 
        String mentalage = entity.getMentalage();
        if (mentalage != null) {
            stmt.bindString(5, mentalage);
        }
 
        String mmsescore = entity.getMmsescore();
        if (mmsescore != null) {
            stmt.bindString(6, mmsescore);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DetailFast entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getEscalaId());
 
        String stagename = entity.getStagename();
        if (stagename != null) {
            stmt.bindString(3, stagename);
        }
 
        String characteristics = entity.getCharacteristics();
        if (characteristics != null) {
            stmt.bindString(4, characteristics);
        }
 
        String mentalage = entity.getMentalage();
        if (mentalage != null) {
            stmt.bindString(5, mentalage);
        }
 
        String mmsescore = entity.getMmsescore();
        if (mmsescore != null) {
            stmt.bindString(6, mmsescore);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DetailFast readEntity(Cursor cursor, int offset) {
        DetailFast entity = new DetailFast( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // escalaId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // stagename
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // characteristics
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // mentalage
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // mmsescore
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DetailFast entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEscalaId(cursor.getLong(offset + 1));
        entity.setStagename(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCharacteristics(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMentalage(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMmsescore(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DetailFast entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DetailFast entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DetailFast entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "detailFastList" to-many relationship of Scale. */
    public List<DetailFast> _queryScale_DetailFastList(long escalaId) {
        synchronized (this) {
            if (scale_DetailFastListQuery == null) {
                QueryBuilder<DetailFast> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.EscalaId.eq(null));
                scale_DetailFastListQuery = queryBuilder.build();
            }
        }
        Query<DetailFast> query = scale_DetailFastListQuery.forCurrentThread();
        query.setParameter(0, escalaId);
        return query.list();
    }

}
