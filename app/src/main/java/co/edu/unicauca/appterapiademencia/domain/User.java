package co.edu.unicauca.appterapiademencia.domain;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import co.edu.unicauca.appterapiademencia.domain.dao.DaoSession;
import org.greenrobot.greendao.DaoException;

import co.edu.unicauca.appterapiademencia.domain.dao.NoteDao;
import co.edu.unicauca.appterapiademencia.domain.dao.PreferenceTipDao;
import co.edu.unicauca.appterapiademencia.domain.dao.TipDao;
import co.edu.unicauca.appterapiademencia.domain.dao.UserDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "USER".
 */
@Entity(active = true)
public class User {

    @Id(autoincrement = true)
    private Long id;

    @NotNull
    @Unique
    private String username;

    @NotNull
    private String password;

    @NotNull
    private String completeName;
    private Integer accessType;
    private String photopath;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient UserDao myDao;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "userId")
    })
    private List<Note> noteList;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "userId")
    })
    private List<Tip> tipList;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "userId")
    })
    private List<PreferenceTip> preferenceTipList;

    @Generated
    public User() {
    }

    public User(Long id) {
        this.id = id;
    }

    @Generated
    public User(Long id, String username, String password, String completeName, Integer accessType, String photopath) {
        this.id = id;
        this.username = username;
        this.password = password;
        this.completeName = completeName;
        this.accessType = accessType;
        this.photopath = photopath;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUserDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    @NotNull
    public String getUsername() {
        return username;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUsername(@NotNull String username) {
        this.username = username;
    }

    @NotNull
    public String getPassword() {
        return password;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setPassword(@NotNull String password) {
        this.password = password;
    }

    @NotNull
    public String getCompleteName() {
        return completeName;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setCompleteName(@NotNull String completeName) {
        this.completeName = completeName;
    }

    public Integer getAccessType() {
        return accessType;
    }

    public void setAccessType(Integer accessType) {
        this.accessType = accessType;
    }

    public String getPhotopath() {
        return photopath;
    }

    public void setPhotopath(String photopath) {
        this.photopath = photopath;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Note> getNoteList() {
        if (noteList == null) {
            __throwIfDetached();
            NoteDao targetDao = daoSession.getNoteDao();
            List<Note> noteListNew = targetDao._queryUser_NoteList(id);
            synchronized (this) {
                if(noteList == null) {
                    noteList = noteListNew;
                }
            }
        }
        return noteList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetNoteList() {
        noteList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Tip> getTipList() {
        if (tipList == null) {
            __throwIfDetached();
            TipDao targetDao = daoSession.getTipDao();
            List<Tip> tipListNew = targetDao._queryUser_TipList(id);
            synchronized (this) {
                if(tipList == null) {
                    tipList = tipListNew;
                }
            }
        }
        return tipList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetTipList() {
        tipList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<PreferenceTip> getPreferenceTipList() {
        if (preferenceTipList == null) {
            __throwIfDetached();
            PreferenceTipDao targetDao = daoSession.getPreferenceTipDao();
            List<PreferenceTip> preferenceTipListNew = targetDao._queryUser_PreferenceTipList(id);
            synchronized (this) {
                if(preferenceTipList == null) {
                    preferenceTipList = preferenceTipListNew;
                }
            }
        }
        return preferenceTipList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetPreferenceTipList() {
        preferenceTipList = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}
