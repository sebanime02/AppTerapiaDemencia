package co.edu.unicauca.appterapiademencia.domain.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import co.edu.unicauca.appterapiademencia.domain.PreferenceTip;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PREFERENCE_TIP".
*/
public class PreferenceTipDao extends AbstractDao<PreferenceTip, Long> {

    public static final String TABLENAME = "PREFERENCE_TIP";

    /**
     * Properties of entity PreferenceTip.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, long.class, "userId", false, "USER_ID");
        public final static Property TipId = new Property(2, long.class, "tipId", false, "TIP_ID");
        public final static Property Favorite = new Property(3, Boolean.class, "favorite", false, "FAVORITE");
    }

    private Query<PreferenceTip> user_PreferenceTipListQuery;
    private Query<PreferenceTip> tip_PreferenceTipListQuery;

    public PreferenceTipDao(DaoConfig config) {
        super(config);
    }
    
    public PreferenceTipDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PREFERENCE_TIP\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" INTEGER NOT NULL ," + // 1: userId
                "\"TIP_ID\" INTEGER NOT NULL ," + // 2: tipId
                "\"FAVORITE\" INTEGER);"); // 3: favorite
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PREFERENCE_TIP\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PreferenceTip entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
        stmt.bindLong(3, entity.getTipId());
 
        Boolean favorite = entity.getFavorite();
        if (favorite != null) {
            stmt.bindLong(4, favorite ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PreferenceTip entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
        stmt.bindLong(3, entity.getTipId());
 
        Boolean favorite = entity.getFavorite();
        if (favorite != null) {
            stmt.bindLong(4, favorite ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PreferenceTip readEntity(Cursor cursor, int offset) {
        PreferenceTip entity = new PreferenceTip( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // userId
            cursor.getLong(offset + 2), // tipId
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0 // favorite
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PreferenceTip entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.getLong(offset + 1));
        entity.setTipId(cursor.getLong(offset + 2));
        entity.setFavorite(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PreferenceTip entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PreferenceTip entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PreferenceTip entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "preferenceTipList" to-many relationship of User. */
    public List<PreferenceTip> _queryUser_PreferenceTipList(long userId) {
        synchronized (this) {
            if (user_PreferenceTipListQuery == null) {
                QueryBuilder<PreferenceTip> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserId.eq(null));
                user_PreferenceTipListQuery = queryBuilder.build();
            }
        }
        Query<PreferenceTip> query = user_PreferenceTipListQuery.forCurrentThread();
        query.setParameter(0, userId);
        return query.list();
    }

    /** Internal query to resolve the "preferenceTipList" to-many relationship of Tip. */
    public List<PreferenceTip> _queryTip_PreferenceTipList(long tipId) {
        synchronized (this) {
            if (tip_PreferenceTipListQuery == null) {
                QueryBuilder<PreferenceTip> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TipId.eq(null));
                tip_PreferenceTipListQuery = queryBuilder.build();
            }
        }
        Query<PreferenceTip> query = tip_PreferenceTipListQuery.forCurrentThread();
        query.setParameter(0, tipId);
        return query.list();
    }

}
