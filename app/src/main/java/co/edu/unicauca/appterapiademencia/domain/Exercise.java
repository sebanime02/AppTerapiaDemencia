package co.edu.unicauca.appterapiademencia.domain;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import co.edu.unicauca.appterapiademencia.domain.dao.DaoSession;
import org.greenrobot.greendao.DaoException;

import co.edu.unicauca.appterapiademencia.domain.dao.ExerciseDao;
import co.edu.unicauca.appterapiademencia.domain.dao.HistoricDao;
import co.edu.unicauca.appterapiademencia.domain.dao.RecommendationDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "EXERCISE".
 */
@Entity(active = true)
public class Exercise {

    @Id(autoincrement = true)
    private Long id;

    @NotNull
    private String workshop;
    private int level;
    private String instructions;
    private String audioinstructions;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient ExerciseDao myDao;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "exerciseId")
    })
    private List<Historic> historicList;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "exerciseId")
    })
    private List<Recommendation> recommendationList;

    @Generated
    public Exercise() {
    }

    public Exercise(Long id) {
        this.id = id;
    }

    @Generated
    public Exercise(Long id, String workshop, int level, String instructions, String audioinstructions) {
        this.id = id;
        this.workshop = workshop;
        this.level = level;
        this.instructions = instructions;
        this.audioinstructions = audioinstructions;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getExerciseDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    @NotNull
    public String getWorkshop() {
        return workshop;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setWorkshop(@NotNull String workshop) {
        this.workshop = workshop;
    }

    public int getLevel() {
        return level;
    }

    public void setLevel(int level) {
        this.level = level;
    }

    public String getInstructions() {
        return instructions;
    }

    public void setInstructions(String instructions) {
        this.instructions = instructions;
    }

    public String getAudioinstructions() {
        return audioinstructions;
    }

    public void setAudioinstructions(String audioinstructions) {
        this.audioinstructions = audioinstructions;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Historic> getHistoricList() {
        if (historicList == null) {
            __throwIfDetached();
            HistoricDao targetDao = daoSession.getHistoricDao();
            List<Historic> historicListNew = targetDao._queryExercise_HistoricList(id);
            synchronized (this) {
                if(historicList == null) {
                    historicList = historicListNew;
                }
            }
        }
        return historicList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetHistoricList() {
        historicList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Recommendation> getRecommendationList() {
        if (recommendationList == null) {
            __throwIfDetached();
            RecommendationDao targetDao = daoSession.getRecommendationDao();
            List<Recommendation> recommendationListNew = targetDao._queryExercise_RecommendationList(id);
            synchronized (this) {
                if(recommendationList == null) {
                    recommendationList = recommendationListNew;
                }
            }
        }
        return recommendationList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetRecommendationList() {
        recommendationList = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}
