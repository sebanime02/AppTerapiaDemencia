package co.edu.unicauca.appterapiademencia.domain.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import co.edu.unicauca.appterapiademencia.domain.Exercise;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EXERCISE".
*/
public class ExerciseDao extends AbstractDao<Exercise, Long> {

    public static final String TABLENAME = "EXERCISE";

    /**
     * Properties of entity Exercise.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Workshop = new Property(1, String.class, "workshop", false, "WORKSHOP");
        public final static Property Level = new Property(2, int.class, "level", false, "LEVEL");
        public final static Property Instructions = new Property(3, String.class, "instructions", false, "INSTRUCTIONS");
        public final static Property Audioinstructions = new Property(4, String.class, "audioinstructions", false, "AUDIOINSTRUCTIONS");
    }

    private DaoSession daoSession;


    public ExerciseDao(DaoConfig config) {
        super(config);
    }
    
    public ExerciseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EXERCISE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"WORKSHOP\" TEXT NOT NULL ," + // 1: workshop
                "\"LEVEL\" INTEGER NOT NULL ," + // 2: level
                "\"INSTRUCTIONS\" TEXT," + // 3: instructions
                "\"AUDIOINSTRUCTIONS\" TEXT);"); // 4: audioinstructions
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EXERCISE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Exercise entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getWorkshop());
        stmt.bindLong(3, entity.getLevel());
 
        String instructions = entity.getInstructions();
        if (instructions != null) {
            stmt.bindString(4, instructions);
        }
 
        String audioinstructions = entity.getAudioinstructions();
        if (audioinstructions != null) {
            stmt.bindString(5, audioinstructions);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Exercise entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getWorkshop());
        stmt.bindLong(3, entity.getLevel());
 
        String instructions = entity.getInstructions();
        if (instructions != null) {
            stmt.bindString(4, instructions);
        }
 
        String audioinstructions = entity.getAudioinstructions();
        if (audioinstructions != null) {
            stmt.bindString(5, audioinstructions);
        }
    }

    @Override
    protected final void attachEntity(Exercise entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Exercise readEntity(Cursor cursor, int offset) {
        Exercise entity = new Exercise( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // workshop
            cursor.getInt(offset + 2), // level
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // instructions
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // audioinstructions
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Exercise entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWorkshop(cursor.getString(offset + 1));
        entity.setLevel(cursor.getInt(offset + 2));
        entity.setInstructions(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAudioinstructions(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Exercise entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Exercise entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Exercise entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
