package co.edu.unicauca.appterapiademencia.domain.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import co.edu.unicauca.appterapiademencia.domain.Exercise;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EXERCISE".
*/
public class ExerciseDao extends AbstractDao<Exercise, Long> {

    public static final String TABLENAME = "EXERCISE";

    /**
     * Properties of entity Exercise.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property RutinaId = new Property(1, long.class, "rutinaId", false, "RUTINA_ID");
        public final static Property Workshop = new Property(2, String.class, "workshop", false, "WORKSHOP");
        public final static Property Level = new Property(3, int.class, "level", false, "LEVEL");
        public final static Property State = new Property(4, Integer.class, "state", false, "STATE");
        public final static Property Time = new Property(5, Integer.class, "time", false, "TIME");
        public final static Property Completemen = new Property(6, Boolean.class, "completemen", false, "COMPLETEMEN");
        public final static Property Observations = new Property(7, String.class, "observations", false, "OBSERVATIONS");
    }

    private DaoSession daoSession;

    private Query<Exercise> rutina_ExerciseListQuery;

    public ExerciseDao(DaoConfig config) {
        super(config);
    }
    
    public ExerciseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EXERCISE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"RUTINA_ID\" INTEGER NOT NULL ," + // 1: rutinaId
                "\"WORKSHOP\" TEXT NOT NULL ," + // 2: workshop
                "\"LEVEL\" INTEGER NOT NULL ," + // 3: level
                "\"STATE\" INTEGER," + // 4: state
                "\"TIME\" INTEGER," + // 5: time
                "\"COMPLETEMEN\" INTEGER," + // 6: completemen
                "\"OBSERVATIONS\" TEXT);"); // 7: observations
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EXERCISE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Exercise entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getRutinaId());
        stmt.bindString(3, entity.getWorkshop());
        stmt.bindLong(4, entity.getLevel());
 
        Integer state = entity.getState();
        if (state != null) {
            stmt.bindLong(5, state);
        }
 
        Integer time = entity.getTime();
        if (time != null) {
            stmt.bindLong(6, time);
        }
 
        Boolean completemen = entity.getCompletemen();
        if (completemen != null) {
            stmt.bindLong(7, completemen ? 1L: 0L);
        }
 
        String observations = entity.getObservations();
        if (observations != null) {
            stmt.bindString(8, observations);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Exercise entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getRutinaId());
        stmt.bindString(3, entity.getWorkshop());
        stmt.bindLong(4, entity.getLevel());
 
        Integer state = entity.getState();
        if (state != null) {
            stmt.bindLong(5, state);
        }
 
        Integer time = entity.getTime();
        if (time != null) {
            stmt.bindLong(6, time);
        }
 
        Boolean completemen = entity.getCompletemen();
        if (completemen != null) {
            stmt.bindLong(7, completemen ? 1L: 0L);
        }
 
        String observations = entity.getObservations();
        if (observations != null) {
            stmt.bindString(8, observations);
        }
    }

    @Override
    protected final void attachEntity(Exercise entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Exercise readEntity(Cursor cursor, int offset) {
        Exercise entity = new Exercise( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // rutinaId
            cursor.getString(offset + 2), // workshop
            cursor.getInt(offset + 3), // level
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // state
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // time
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // completemen
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // observations
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Exercise entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRutinaId(cursor.getLong(offset + 1));
        entity.setWorkshop(cursor.getString(offset + 2));
        entity.setLevel(cursor.getInt(offset + 3));
        entity.setState(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setTime(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setCompletemen(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setObservations(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Exercise entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Exercise entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Exercise entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "exerciseList" to-many relationship of Rutina. */
    public List<Exercise> _queryRutina_ExerciseList(long rutinaId) {
        synchronized (this) {
            if (rutina_ExerciseListQuery == null) {
                QueryBuilder<Exercise> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.RutinaId.eq(null));
                rutina_ExerciseListQuery = queryBuilder.build();
            }
        }
        Query<Exercise> query = rutina_ExerciseListQuery.forCurrentThread();
        query.setParameter(0, rutinaId);
        return query.list();
    }

}
