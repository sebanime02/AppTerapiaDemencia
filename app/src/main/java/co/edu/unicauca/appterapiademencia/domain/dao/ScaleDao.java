package co.edu.unicauca.appterapiademencia.domain.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import co.edu.unicauca.appterapiademencia.domain.Scale;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SCALE".
*/
public class ScaleDao extends AbstractDao<Scale, Long> {

    public static final String TABLENAME = "SCALE";

    /**
     * Properties of entity Scale.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SintomaId = new Property(1, long.class, "sintomaId", false, "SINTOMA_ID");
        public final static Property Escalaname = new Property(2, String.class, "escalaname", false, "ESCALANAME");
        public final static Property Puntaje = new Property(3, String.class, "puntaje", false, "PUNTAJE");
    }

    private DaoSession daoSession;

    private Query<Scale> sintoma_ScaleListQuery;

    public ScaleDao(DaoConfig config) {
        super(config);
    }
    
    public ScaleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SCALE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SINTOMA_ID\" INTEGER NOT NULL ," + // 1: sintomaId
                "\"ESCALANAME\" TEXT," + // 2: escalaname
                "\"PUNTAJE\" TEXT);"); // 3: puntaje
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SCALE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Scale entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getSintomaId());
 
        String escalaname = entity.getEscalaname();
        if (escalaname != null) {
            stmt.bindString(3, escalaname);
        }
 
        String puntaje = entity.getPuntaje();
        if (puntaje != null) {
            stmt.bindString(4, puntaje);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Scale entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getSintomaId());
 
        String escalaname = entity.getEscalaname();
        if (escalaname != null) {
            stmt.bindString(3, escalaname);
        }
 
        String puntaje = entity.getPuntaje();
        if (puntaje != null) {
            stmt.bindString(4, puntaje);
        }
    }

    @Override
    protected final void attachEntity(Scale entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Scale readEntity(Cursor cursor, int offset) {
        Scale entity = new Scale( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // sintomaId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // escalaname
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // puntaje
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Scale entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSintomaId(cursor.getLong(offset + 1));
        entity.setEscalaname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPuntaje(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Scale entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Scale entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Scale entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "scaleList" to-many relationship of Sintoma. */
    public List<Scale> _querySintoma_ScaleList(long sintomaId) {
        synchronized (this) {
            if (sintoma_ScaleListQuery == null) {
                QueryBuilder<Scale> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.SintomaId.eq(null));
                sintoma_ScaleListQuery = queryBuilder.build();
            }
        }
        Query<Scale> query = sintoma_ScaleListQuery.forCurrentThread();
        query.setParameter(0, sintomaId);
        return query.list();
    }

}
