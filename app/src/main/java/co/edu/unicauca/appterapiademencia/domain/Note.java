package co.edu.unicauca.appterapiademencia.domain;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import co.edu.unicauca.appterapiademencia.domain.dao.DaoSession;
import org.greenrobot.greendao.DaoException;

import co.edu.unicauca.appterapiademencia.domain.dao.NoteDao;
import co.edu.unicauca.appterapiademencia.domain.dao.SintomaDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "NOTE".
 */
@Entity(active = true)
public class Note {

    @Id(autoincrement = true)
    private Long id;
    private long patientId;
    private long userId;
    private Integer type;

    @NotNull
    private String date;
    private String hour;
    private String description;
    private String ambito;
    private String selection;
    private String owner;
    private Boolean late;
    private Boolean state;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient NoteDao myDao;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "noteId")
    })
    private List<Sintoma> sintomaList;

    @Generated
    public Note() {
    }

    public Note(Long id) {
        this.id = id;
    }

    @Generated
    public Note(Long id, long patientId, long userId, Integer type, String date, String hour, String description, String ambito, String selection, String owner, Boolean late, Boolean state) {
        this.id = id;
        this.patientId = patientId;
        this.userId = userId;
        this.type = type;
        this.date = date;
        this.hour = hour;
        this.description = description;
        this.ambito = ambito;
        this.selection = selection;
        this.owner = owner;
        this.late = late;
        this.state = state;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getNoteDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getPatientId() {
        return patientId;
    }

    public void setPatientId(long patientId) {
        this.patientId = patientId;
    }

    public long getUserId() {
        return userId;
    }

    public void setUserId(long userId) {
        this.userId = userId;
    }

    public Integer getType() {
        return type;
    }

    public void setType(Integer type) {
        this.type = type;
    }

    @NotNull
    public String getDate() {
        return date;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDate(@NotNull String date) {
        this.date = date;
    }

    public String getHour() {
        return hour;
    }

    public void setHour(String hour) {
        this.hour = hour;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getAmbito() {
        return ambito;
    }

    public void setAmbito(String ambito) {
        this.ambito = ambito;
    }

    public String getSelection() {
        return selection;
    }

    public void setSelection(String selection) {
        this.selection = selection;
    }

    public String getOwner() {
        return owner;
    }

    public void setOwner(String owner) {
        this.owner = owner;
    }

    public Boolean getLate() {
        return late;
    }

    public void setLate(Boolean late) {
        this.late = late;
    }

    public Boolean getState() {
        return state;
    }

    public void setState(Boolean state) {
        this.state = state;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Sintoma> getSintomaList() {
        if (sintomaList == null) {
            __throwIfDetached();
            SintomaDao targetDao = daoSession.getSintomaDao();
            List<Sintoma> sintomaListNew = targetDao._queryNote_SintomaList(id);
            synchronized (this) {
                if(sintomaList == null) {
                    sintomaList = sintomaListNew;
                }
            }
        }
        return sintomaList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetSintomaList() {
        sintomaList = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}
