package co.edu.unicauca.appterapiademencia.domain;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import co.edu.unicauca.appterapiademencia.domain.dao.DaoSession;
import org.greenrobot.greendao.DaoException;

import co.edu.unicauca.appterapiademencia.domain.dao.PreferenceTipDao;
import co.edu.unicauca.appterapiademencia.domain.dao.TipDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "TIP".
 */
@Entity(active = true)
public class Tip {

    @Id(autoincrement = true)
    private Long id;
    private long userId;
    private String title;
    private String description;
    private Boolean active;
    private Integer likes;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient TipDao myDao;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "tipId")
    })
    private List<PreferenceTip> preferenceTipList;

    @Generated
    public Tip() {
    }

    public Tip(Long id) {
        this.id = id;
    }

    @Generated
    public Tip(Long id, long userId, String title, String description, Boolean active, Integer likes) {
        this.id = id;
        this.userId = userId;
        this.title = title;
        this.description = description;
        this.active = active;
        this.likes = likes;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTipDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getUserId() {
        return userId;
    }

    public void setUserId(long userId) {
        this.userId = userId;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Boolean getActive() {
        return active;
    }

    public void setActive(Boolean active) {
        this.active = active;
    }

    public Integer getLikes() {
        return likes;
    }

    public void setLikes(Integer likes) {
        this.likes = likes;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<PreferenceTip> getPreferenceTipList() {
        if (preferenceTipList == null) {
            __throwIfDetached();
            PreferenceTipDao targetDao = daoSession.getPreferenceTipDao();
            List<PreferenceTip> preferenceTipListNew = targetDao._queryTip_PreferenceTipList(id);
            synchronized (this) {
                if(preferenceTipList == null) {
                    preferenceTipList = preferenceTipListNew;
                }
            }
        }
        return preferenceTipList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetPreferenceTipList() {
        preferenceTipList = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}
